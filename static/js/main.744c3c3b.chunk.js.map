{"version":3,"sources":["App.test.js","setupTests.js","../src sync /^/.*$","AvatarList.js","index.js","nayeem.jpg","neela.jpg","rakhi.jpg","shammah.jpg","Avatar.js","App.js","serviceWorker.js","logo.svg"],"names":["test","linkElement","getByText","render","expect","toBeInTheDocument","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","AvatarList","props","className","alt","src","require","im","name","work","ReactDOM","document","getElementById","serviceWorker","Avatar","App","logo","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","message"],"mappings":"gJAAA,4CAIAA,KAAK,4BAA4B,WAAO,IAEhCC,GAAcC,EADEC,YAAO,kBAAC,UAAD,OAArBD,WACsB,gBAC9BE,OAAOH,GAAaI,wB,iCCPtB,e,yDCAA,IAAIC,EAAM,CACT,KAAM,GACN,QAAS,GACT,YAAa,IACb,WAAY,GACZ,aAAc,IACd,gBAAiB,IACjB,WAAY,GACZ,eAAgB,GAChB,cAAe,GACf,eAAgB,GAChB,kBAAmB,GACnB,UAAW,GACX,cAAe,IACf,aAAc,GACd,aAAc,GACd,eAAgB,IAChB,cAAe,IACf,cAAe,IACf,kBAAmB,GACnB,qBAAsB,GACtB,eAAgB,IAChB,kBAAmB,IACnB,gBAAiB,KAIlB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,gCC5CpB,wCAiBeY,UAbI,SAACC,GAChB,OAEI,yBAAKC,UAAU,8DACX,yBAAKC,IAAM,SAASC,IAAKC,OAAQ,KAAKJ,EAAMK,MAC5C,4BAAKL,EAAMM,MACX,2BAAIN,EAAMO,S,gCCVtB,qEAMAC,IAAS3B,OAAO,kBAAC,UAAD,MACd4B,SAASC,eAAe,SAM1BC,gB,oBCbAd,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,gCCA3C,gDAqBec,UAhBA,SAACZ,GACZ,OACI,6BACI,wBAAIC,UAAU,MAAd,2BACA,6BACI,kBAAC,UAAD,CAAYK,KAAK,QAAQC,KAAK,gBAAgBF,GAAG,cACjD,kBAAC,UAAD,CAAYC,KAAK,SAASC,KAAK,qBAAqBF,GAAG,eACvD,kBAAC,UAAD,CAAYC,KAAK,QAAQC,KAAK,gBAAgBF,GAAG,cACjD,kBAAC,UAAD,CAAYC,KAAK,UAAUC,KAAK,gBAAgBF,GAAG,iBAEvD,4BAAQJ,UAAU,sBAAlB,gB,gCCfZ,mDAyBeY,UArBf,WACE,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKE,IAAKW,IAAMb,UAAU,WAAWC,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACED,UAAU,WACVc,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,mB,gCCZR,2FAYA,IAAMC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIC,SAASC,EAASC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,eAAwBR,OAAOC,SAASN,MACpDc,SAAWT,OAAOC,SAASQ,OAIvC,OAGFT,OAAOU,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMH,eAAN,sBAEPV,IAgEV,SAAiCa,EAAON,GAEtCO,MAAMD,EAAO,CACXE,QAAS,CAAE,iBAAkB,YAE5BC,MAAK,SAAAC,GAEJ,IAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5Cb,UAAUf,cAAc6B,MAAMN,MAAK,SAAAO,GACjCA,EAAaC,aAAaR,MAAK,WAC7Bd,OAAOC,SAASsB,eAKpBC,EAAgBb,EAAON,MAG1BoB,OAAM,WACLC,QAAQC,IACN,oEAvFAC,CAAwBjB,EAAON,GAI/BC,UAAUf,cAAc6B,MAAMN,MAAK,WACjCY,QAAQC,IACN,iHAMJH,EAAgBb,EAAON,OAM/B,SAASmB,EAAgBb,EAAON,GAC9BC,UAAUf,cACPa,SAASO,GACTG,MAAK,SAAAO,GACJA,EAAaQ,cAAgB,WAC3B,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf3B,UAAUf,cAAc2C,YAI1BR,QAAQC,IACN,iHAKEtB,GAAUA,EAAO8B,UACnB9B,EAAO8B,SAASd,KAMlBK,QAAQC,IAAI,sCAGRtB,GAAUA,EAAO+B,WACnB/B,EAAO+B,UAAUf,WAO5BI,OAAM,SAAAY,GACLX,QAAQW,MAAM,4CAA6CA,MAkC1D,SAASf,IACV,kBAAmBhB,WACrBA,UAAUf,cAAc6B,MACrBN,MAAK,SAAAO,GACJA,EAAaC,gBAEdG,OAAM,SAAAY,GACLX,QAAQW,MAAMA,EAAMC,c,wCCzI5B7D,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.744c3c3b.chunk.js","sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  const { getByText } = render(<App />);\n  const linkElement = getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n","// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom/extend-expect';\n","var map = {\n\t\"./\": 43,\n\t\"./App\": 65,\n\t\"./App.css\": 105,\n\t\"./App.js\": 65,\n\t\"./App.test\": 106,\n\t\"./App.test.js\": 106,\n\t\"./Avatar\": 64,\n\t\"./Avatar.css\": 69,\n\t\"./Avatar.js\": 64,\n\t\"./AvatarList\": 28,\n\t\"./AvatarList.js\": 28,\n\t\"./index\": 43,\n\t\"./index.css\": 103,\n\t\"./index.js\": 43,\n\t\"./logo.svg\": 98,\n\t\"./nayeem.jpg\": 462,\n\t\"./neela.jpg\": 463,\n\t\"./rakhi.jpg\": 464,\n\t\"./serviceWorker\": 66,\n\t\"./serviceWorker.js\": 66,\n\t\"./setupTests\": 149,\n\t\"./setupTests.js\": 149,\n\t\"./shammah.jpg\": 604\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 190;","import React from 'react'\r\nimport 'tachyons'\r\nimport './Avatar.css'\r\n\r\nconst AvatarList = (props) => {\r\n    return(\r\n        \r\n        <div className=\"avatarstyle bg-light-purple ma4 dib pa4 tc grow text-white\">\r\n            <img alt = \"avatar\" src={require('./'+props.im)}/>\r\n            <h1>{props.name}</h1>\r\n            <p>{props.work}</p>\r\n        </div>\r\n          \r\n    )\r\n\r\n}\r\n\r\nexport default AvatarList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Avatar from './Avatar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Avatar/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/nayeem.18ff58ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/neela.71325a7c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rakhi.8925b4b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/shammah.197a7891.jpg\";","import React from 'react'\r\nimport AvatarList from './AvatarList'\r\nimport 'tachyons'\r\nimport './Avatar.css'\r\n\r\nconst Avatar = (props) => {\r\n    return(\r\n        <div>\r\n            <h1 className=\"tc\">Welcome to avatar world</h1>\r\n            <div>\r\n                <AvatarList name=\"Neela\" work=\"web developer\" im=\"neela.jpg\" />\r\n                <AvatarList name=\"Nayeem\" work=\"software developer\" im=\"nayeem.jpg\"/>\r\n                <AvatarList name=\"Rakhi\" work=\"web developer\" im=\"rakhi.jpg\"/>\r\n                <AvatarList name=\"Shammah\" work=\"web developer\" im=\"shammah.jpg\"/>\r\n            </div>\r\n            <button className=\"btn btn-border-pop\">subscribe</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Avatar;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}